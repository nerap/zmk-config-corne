/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define LEFT_POSITIONS  0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38
#define RIGHT_POSITIONS 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41
/* Key Positions
╭────────────────────────╮ ╭────────────────────────╮
│  0   1   2   3   4   5 │ │  6   7   8   9  10  11 │
│ 12  13  14  15  16  17 │ │ 18  19  20  21  22  23 │
│ 24  25  26  27  28  29 │ │ 30  31  32  33  34  35 │
╰───────────╮ 36  37  38 │ │ 39  40  41 ╭───────────╯
            ╰────────────╯ ╰────────────╯
*/

// Mouse Overrides
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2400
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 40

// Layers
#define DEFAULT   0
#define LOWER     1
#define UPPER     2
#define MACRO     3

/ {

    behaviors {
        hrml: home_row_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            //require-prior-idle-ms = <125>;
            hold-trigger-key-positions = < RIGHT_POSITIONS >;
            //hold-trigger-on-release; // delay positional check until key release
            bindings =
                <&kp>,
                <&kp>;
        };

        hrmr: home_row_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            //require-prior-idle-ms = <125>;
            hold-trigger-key-positions = < LEFT_POSITIONS >;
            //hold-trigger-on-release; // delay positional check until key release
            bindings =
                <&kp>,
                <&kp>;
        };

        lthp: layer_tap_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            //require-prior-idle-ms = <125>;
            flavor = "hold-preferred";
            bindings =
                <&mo>,
                <&kp>;
        };

        mthp: mod_tap_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            //require-prior-idle-ms = <125>;
            flavor = "hold-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };

        mttp: mod_tap_tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;
            //require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
    };

    macros {
        vim_save: vim_save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp ESC &kp COLON &kp W &kp RETURN>;
        };

        vim_quit: vim_quit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp ESC &kp COLON &kp Q &kp RETURN>;
        };

        vim_up: vim_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LCTRL &kp U>;
        };

        vim_down: vim_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LCTRL &kp D>;
        };

      };

    keymap {
      compatible = "zmk,keymap";

                default_layer {
                        display-name = "base";
                        bindings = <
                         &kp ESC &kp Q &kp W &kp E &kp R &kp T    &kp Y &kp U  &kp I &kp O &kp P &kp MINUS
&kp RBKT &hrml LSHFT A &hrml LALT S &hrml LCTRL D &hrml LCMD F &kp G   &kp H &hrmr RCMD J &hrmr RCTRL K &hrmr RALT L &hrmr RSHFT SEMI &kp SQT
                        &kp GRAVE &kp Z &kp X &kp C &hrml LSHFT V &kp B    &kp N &hrmr RSHFT M  &kp COMMA &kp DOT &kp FSLH &kp BSLH
                                   &lthp 1 BSPC &lthp 2 SPACE &lthp 3 ESC    &kp SPACE &lthp 2 RET &lthp 1 TAB
                        >;
                };
                lower_layer {
                        display-name = "low";
                        bindings = <
   &kp BSPC &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp HOME &kp PG_DN &kp PG_UP &kp END &kp LG(LA(UP)) &kp LG(LA(DOWN))
   &kp DEL &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp LG(LA(LEFT)) &kp LG(LA(RIGHT))
   &kp F1  &kp F2 &kp F3 &kp F4 &kp F5 &kp F6  &kp F7   &kp F8   &kp F9 &kp F10 &kp F11 &kp F12
                                    &trans  &trans &trans &trans &trans &trans
                        >;
                };

                raise_layer {
                        display-name = "up";
                        bindings = <
   &kp LG(N1) &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp LPAR &kp RPAR &kp UNDER &kp PLUS &kp RG(N1)  &kp RG(N2)
   &kp LG(N2) &kp CARET &kp AMPS &kp KP_ASTERISK &kp LPAR &kp RPAR      &kp LBKT &kp RBKT &kp MINUS &kp EQUAL &kp BSLH &kp RG(N3)
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4      &kp LBKT &kp RBKT &kp LT &kp GT &kp PIPE &none
                             &trans &trans &trans   &trans &trans &trans
                        >;
                };

                macro_layer {
                        display-name = "macro";
                        bindings = <
  &none &vim_quit &vim_save &none &none &none &none &vim_up &none &none &none &none
  &none &none &none &vim_down &none &none &none &none &none &none &none &none
  &none &none &none &none &none &none &none &none &none &none &none &none
                                    &trans  &trans &trans     &trans &trans &trans
                        >;
                };
        };
};
